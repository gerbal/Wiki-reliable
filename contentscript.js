function getStatsPageURI_() {
    //gets the URI of the current page, turns it into the stats page URL returns it
    var currentTab = location.href;
    var article = currentTab.slice(currentTab.lastIndexOf("/") + 1, currentTab.length);
    var lang = currentTab.slice(); //we need to get the language and drop it in the "&lang". Until then this is empty
    var statsuri = "https://tools.wmflabs.org/xtools/articleinfo/index.php?article=" + article + "&lang=en&wiki=wikipedia";
    console.log(statsuri);
    return statsuri;
}

function extractStats_(div) {
    //Currently unused. May be used to extract stats from the div we pass around
    var tables = div.getElementsByType('table');
    putbox(document, tables, "warning");
}
/*function calculateScore(featured,length,edits,sources,authors,links,recency){
        //we may use this to calculate the score. I'd rather do that in the background.
        if(featured){
            var score = (edits/length)+(sources/length)+(authors/length)+(links/length)+(10/recency);
            return score;
        }
        else
        {
            var score =(edits/length)+(sources/length)+(authors/length)+(links/length)+(10/recency);
            return score;
        }
    }


    function decorateBoxScore(score){
       //choose which color to theme the box based on the score.
        if(score>=10){
            return "good";
        }
        if(score<10&&score>=5){
            return "warning";
        }
        else{
            return "danger";
        }
    }*/

function putbox(document, score, color) {
    //puts a box on the page and styles it. 
    var box = document.getElementById('mw-content-text');
    var table = document.createElement("table");
    var newrow = document.createElement('tr');
    var th = document.createElement('th');
    newrow.className = color;
    table.className = color + " infobox vcard ";
    table.style.width = "22em";
    table.id = color;
    th.colspan = "2";
    th.className = color + " n";
    th.style.textAlign = "center";
    th.style.fontSize = "125%";
    th.innerText = score;
    newrow.appendChild(th);
    table.appendChild(newrow);
    box.insertBefore(table, box.firstChild);
}
// function runscript(tabId, changeInfo, tab) {
//     No tabs or host permissions needed!
//      chrome.tabs.insertCSS(tabId, {
//         file: chrome.extension.getURL("css/styles.css")
//     });
//     if (changeInfo.status == 'complete') {
//         chrome.tabs.executeScript({
//             code: 'putbox(document, 10, "warning");'
//         });
//         chrome.tabs.insertCSS(tabId, {
//             file: "css/styles.css"
//         }, function() {
//             console.log("css injected");
//         });
//     }
// }; 
// this is our mainloop, of a sort. It's quite poorly structured.
var xml = Object;
var port = chrome.runtime.connect({
    name: "uriexchange"
}); //We're opening a connection to the background
port.postMessage({
    uri: getStatsPageURI_()
}); //send the URI generated by getStatsPageURI_()
console.log("port name: " + port.name);
port.onMessage.addListener(function (msg) { //wait for background.js to hand us back a score (or something)
    var xml = msg.table;
});
//extractStats_(xml);
//     uri: getStatsPageURI_()
//  }, function (response) {
//     console.log(response.table);
// });

function insertCSS() {
    //inserts our cutdown css styles to color the scoreBox.
    var css = document.createElement("link");
    var bsurl = chrome.extension.getURL("bootstrap.css");
    css.href = bsurl;
    css.rel = "stylesheet";
    document.head.appendChild(css);
}
insertCSS();
putbox(document, xml, "success");
//getStatsPage_(getStatsPageURI_());
//getStatsPageURI_();